<div id="live-widget" class="live text-sm">
  <div id="live-now"></div>
  <div id="live-next" class="mt-4"></div>
  <div id="live-stream" class="mt-4"></div>
</div>

<script>
(async () => {
  async function safeJson(url) {
    try { const r = await fetch(url); if(!r.ok) throw new Error('bad'); return await r.json(); }
    catch { return []; }
  }

  const [milestones, sessions, stream] = await Promise.all([
    safeJson('/data/milestones.json'),
    safeJson('/data/sessions.json'),
    safeJson('/data/stream.json'),
  ]);

  const nowEl = document.getElementById('live-now');
  const nextEl = document.getElementById('live-next');
  const streamEl = document.getElementById('live-stream');

  const now = Date.now();
  const live = Array.isArray(sessions)
    ? sessions.find(s => s && !s.end && (now - new Date(s.start).getTime()) < 2*60*60*1000)
    : null;

  nowEl.innerHTML = live
    ? `ðŸ”´ <strong>LIVE</strong>: <a href="${live.url}">${live.topic}</a>`
    : (sessions && sessions[0] ? `Last session: <a href="${sessions[0].url}">${sessions[0].topic}</a>` : `No sessions yet.`);

  const upcoming = (Array.isArray(milestones) ? milestones : [])
    .filter(m => m && m.due && new Date(m.due) >= new Date())
    .slice(0,5);

  nextEl.innerHTML = `<h4>Next milestones</h4>` + (
    upcoming.length
      ? `<ul>` + upcoming.map(m => `<li><a href="${m.url}">${m.title}</a> â€” ${m.due} <em>(${m.status||'planned'})</em></li>`).join('') + `</ul>`
      : `<p>Nothing scheduled.</p>`
  );

  const streamList = (Array.isArray(stream) ? stream : []).slice(0,5);
  streamEl.innerHTML = `<h4>Stream</h4>` + (
    streamList.length
      ? `<ul>` + streamList.map(s => `<li>${s.date || ''} â€” <a href="${s.url}">entry</a></li>`).join('') + `</ul>`
      : `<p>No recent entries.</p>`
  );
})();
</script>
